package arenx.finance.yql.yahoo.finance;

import java.io.Serializable;
import java.util.Date;
import java.util.StringTokenizer;

import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.PrimaryKey;

import org.apache.commons.lang3.Validate;

import com.fasterxml.jackson.annotation.JsonProperty;

@PersistenceCapable(table="historicaldata",objectIdClass=HistoricaldataBean.Key.class,detachable="true")
public class HistoricaldataBean {
	
	public String getSymbol() {
		return symbol;
	}

	public Date getDate() {
		return date;
	}

	public Double getOpen() {
		return open;
	}

	public Double getHigh() {
		return high;
	}

	public Double getLow() {
		return low;
	}

	public Double getClose() {
		return close;
	}

	public Long getVolume() {
		return volume;
	}

	public Double getAdjClose() {
		return adjClose;
	}

	@JsonProperty(value = "Symbol")
	@PrimaryKey
	private String symbol;
	@PrimaryKey
	@JsonProperty(value = "Date")
	private Date date;
	@JsonProperty(value = "Open")
	@Persistent
	private Double open;
	@JsonProperty(value = "High")
	@Persistent
	private Double high;
	@JsonProperty(value = "Low")
	@Persistent
	private Double low;
	@JsonProperty(value = "Close")
	@Persistent
	private Double close;
	@JsonProperty(value = "Volume")
	@Persistent
	private Long volume;
	@JsonProperty(value = "Adj_Close")
	@Persistent
	private Double adjClose;

	@Override
	public String toString() {
		return "HistoricaldataBean [symbol=" + symbol + ", date=" + date + ", open=" + open + ", high=" + high + ", low=" + low + ", close=" + close + ", volume=" + volume + ", adjClose=" + adjClose
				+ "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((adjClose == null) ? 0 : adjClose.hashCode());
		result = prime * result + ((close == null) ? 0 : close.hashCode());
		result = prime * result + ((date == null) ? 0 : date.hashCode());
		result = prime * result + ((high == null) ? 0 : high.hashCode());
		result = prime * result + ((low == null) ? 0 : low.hashCode());
		result = prime * result + ((open == null) ? 0 : open.hashCode());
		result = prime * result + ((symbol == null) ? 0 : symbol.hashCode());
		result = prime * result + ((volume == null) ? 0 : volume.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		HistoricaldataBean other = (HistoricaldataBean) obj;
		if (adjClose == null) {
			if (other.adjClose != null)
				return false;
		} else if (!adjClose.equals(other.adjClose))
			return false;
		if (close == null) {
			if (other.close != null)
				return false;
		} else if (!close.equals(other.close))
			return false;
		if (date == null) {
			if (other.date != null)
				return false;
		} else if (!date.equals(other.date))
			return false;
		if (high == null) {
			if (other.high != null)
				return false;
		} else if (!high.equals(other.high))
			return false;
		if (low == null) {
			if (other.low != null)
				return false;
		} else if (!low.equals(other.low))
			return false;
		if (open == null) {
			if (other.open != null)
				return false;
		} else if (!open.equals(other.open))
			return false;
		if (symbol == null) {
			if (other.symbol != null)
				return false;
		} else if (!symbol.equals(other.symbol))
			return false;
		if (volume == null) {
			if (other.volume != null)
				return false;
		} else if (!volume.equals(other.volume))
			return false;
		return true;
	}
	
	public static class Key implements Serializable
	{
	    public String symbol;
	    public Date date;

	    public Key ()
	    {
	    }

	    public Key(String symbol, Date date) {
	    	Validate.notNull(symbol);
	    	Validate.notNull(date);
			this.symbol = symbol;
			this.date = date;
		}

		/**
	     * Constructor accepting same input as generated by toString().
	     */
	    public Key(String value) 
	    {
	        StringTokenizer token = new StringTokenizer (value, "::");
	        this.symbol = token.nextToken();
	        this.date = new Date(Long.parseLong(token.nextToken()));
	    }

	    

	    @Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((date == null) ? 0 : date.hashCode());
			result = prime * result + ((symbol == null) ? 0 : symbol.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Key other = (Key) obj;
			if (date == null) {
				if (other.date != null)
					return false;
			} else if (!date.equals(other.date))
				return false;
			if (symbol == null) {
				if (other.symbol != null)
					return false;
			} else if (!symbol.equals(other.symbol))
				return false;
			return true;
		}

		public String toString ()
	    {
	        // Give output expected by String constructor
	        return this.symbol + "::" + this.date.getTime();
	    }
	}
	
}
