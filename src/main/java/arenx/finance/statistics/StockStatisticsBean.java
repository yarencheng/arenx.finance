package arenx.finance.statistics;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.TreeMap;

import javax.jdo.annotations.Element;
import javax.jdo.annotations.Join;
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.PrimaryKey;
import javax.jdo.annotations.Serialized;

import org.apache.commons.lang3.Validate;
import org.apache.commons.math3.stat.descriptive.moment.Mean;
import org.apache.commons.math3.stat.descriptive.moment.Variance;

@PersistenceCapable(table="StockStatistics", objectIdClass=StockStatisticsBean.Key.class,detachable="true")
public class StockStatisticsBean {
	public StockStatisticsBean(String symbol, Date date) {
		this.symbol = symbol;
		this.date = date;
	}
	
	@PrimaryKey
	private String symbol;
	@PrimaryKey
	private Date date;
	@Persistent
	private Double price;
	@Persistent(defaultFetchGroup="true")
	@Join
	private Map<Integer,Variance> priceVariance=new TreeMap<Integer,Variance>();
	@Persistent(defaultFetchGroup="true")
	@Join
	private Map<Integer,Mean> priceMean=new TreeMap<Integer,Mean>();
	
	
	
	public Double getPrice() {
		return price;
	}

	public void setPrice(Double price) {
		this.price = price;
	}

	public String getSymbol() {
		return symbol;
	}

	public Date getDate() {
		return date;
	}

	public Map<Integer, Variance> getPriceVariance() {
		return priceVariance;
	}

	public Map<Integer, Mean> getPriceMean() {
		return priceMean;
	}

	@Override
	public String toString() {
		return "StockStatisticsBean [symbol=" + symbol + ", date=" + date + ", price=" + price + ", priceVariance=" + priceVariance + ", priceMean=" + priceMean + "]";
	}
		
	public static class Key implements Serializable
	{
	    public String symbol;
	    public Date date;

	    public Key ()
	    {
	    }

	    public Key(String symbol, Date date) {
	    	Validate.notNull(symbol);
	    	Validate.notNull(date);
			this.symbol = symbol;
			this.date = date;
		}

		/**
	     * Constructor accepting same input as generated by toString().
	     */
	    public Key(String value) 
	    {
	        StringTokenizer token = new StringTokenizer (value, "::");
	        this.symbol = token.nextToken();
	        this.date = new Date(Long.parseLong(token.nextToken()));
	    }

	    

	    @Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((date == null) ? 0 : date.hashCode());
			result = prime * result + ((symbol == null) ? 0 : symbol.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Key other = (Key) obj;
			if (date == null) {
				if (other.date != null)
					return false;
			} else if (!date.equals(other.date))
				return false;
			if (symbol == null) {
				if (other.symbol != null)
					return false;
			} else if (!symbol.equals(other.symbol))
				return false;
			return true;
		}

		public String toString ()
	    {
	        // Give output expected by String constructor
	        return this.symbol + "::" + this.date.getTime();
	    }
	}
}


